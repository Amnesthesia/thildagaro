# Scaffolding generated by Casein v5.1.1.5

module Casein
  class ProjectsController < Casein::CaseinController

    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]

    def index
      @casein_page_title = 'Projects'
  		@projects = Project.order(sort_order(:title)).paginate :page => params[:page]
    end

    def show
      @casein_page_title = 'View project'
      @project = Project.friendly.find params[:id]
    end

    def new
      @casein_page_title = 'Add a new project'
    	@project = Project.new
    end

    def create
      @project = Project.new project_params

      if project_params[:order].is_a? Integer and Project.exists?(order: project_params[:order])
          Project.where(order: project_params[:order]).each do |p|
              p.increment(order: 1)
          end
      end

      if @project.save
        flash[:notice] = 'Project created'

        if params[:pictures]
            params[:pictures].each do |picture|
                pic = @project.pictures.new(path: picture)
                pic.save
            end
        end
        redirect_to casein_projects_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new project'
        render :action => :new
      end
    end

    def update
      @casein_page_title = 'Update project'

      @project = Project.friendly.find params[:id]

      if project_params[:order].is_a? Integer and Project.exists?(order: project_params[:order])
          Project.where(order: project_params[:order]).each do |p|
              p.increment(order: 1)
          end
      else
          project_params[:order] = 0
      end

      if @project.update_attributes project_params
        if params[:pictures]
          params[:pictures].each do |picture|
              pic = @project.pictures.new(path: picture)
              pic.save
          end
        end
        if params[:captions]
            params[:captions].each do |cap|
                if pic.exists?(cap.shift)
                    pic = @project.pictures.find cap.shift

                    pic.update(caption: cap.shift.to_s) unless pic.nil?
                end
            end
        end
        flash[:notice] = 'Project has been updated'
        redirect_to casein_projects_path
      else
        flash.now[:warning] = 'There were problems when trying to update this project'
        render :action => :show
      end
    end

    def destroy
      @project = Project.friendly.find params[:id]

      @project.destroy
      flash[:notice] = 'Project has been deleted'
      redirect_to casein_projects_path
    end

    private

      def project_params
        params.require(:project).permit(:title, :subtitle, :content, :order, :client, :client_url, :completion_date, :published, :pictures => [], :captions => [])
      end

  end
end
